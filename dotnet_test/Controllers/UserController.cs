using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using dotnet_test.Dtos;
using dotnet_test.Dtos.User;
using dotnet_test.Services.UserService;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;


namespace dotnet_test.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserController : ControllerBase
    {
        private readonly IUserService _userService;

        public UserController(IUserService userService)
        {
            _userService = userService;
        }

        //Dtos
        [HttpGet("GetAll")]
        public async Task<ActionResult<ServiceResponse<List<GetUserDto>>>> Get()
        {
            return Ok(await _userService.GetAllUsers());
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<ServiceResponse<GetUserDto>>> GetSingle(int id)
        {
            return Ok(await _userService.GetUserById(id));
        }

        [HttpDelete("{id}")]
        public async Task<ActionResult<ServiceResponse<List<GetUserDto>>>> Delete(int id)
        {
            var response = await _userService.DeleteUser(id);
            if (response.Data == null)
            {
                return NotFound(response);
            }
            return Ok(response);
        }

        [HttpPost]
        public async Task<ActionResult<List<ServiceResponse<GetUserDto>>>> AddUser(AddUserDto newUser)
        {
            return Ok(await _userService.AddUser(newUser));
        }

        [HttpPut]
        public async Task<ActionResult<ServiceResponse<GetUserDto>>> UpdateUser(UpdateUserDto updatedUser)
        {
            var response = await _userService.UpdateUser(updatedUser);
            if (response.Data == null)
            {
                return NotFound(response);
            }
            return Ok(response);
        }
    }
}

        /*
         * POST:user/add , GET:user/get,  UPDATE: user /update , DELETE: user /delete
The user endpoint will create, get, update and delete a user in an in memory Database (static object/class).

add: It will receive an object in json format and will save a user in the database and return a json of the user created with ID generated by the database

get: this endpoint will receive a json type object, or a query string or a url variable that specifies the user to get and this will return the database user in json format

update: will receive a user object in json format which will have the updated parameters and the object will be updated in the database, this endpoint will return the updated user in json format

delete: will receive an object, query string or variable in url that corresponds to the ID of the user to delete and this will be deleted from the database and the information of the deleted user will be returned in json format
*/
      
